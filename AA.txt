c
a
b
f
a
c
b
c

{

}
/*
int ListItemCount(struct DB_LinkedList *plist)

{

return plist->numOfdata;
}
*/
void InsertItem(struct DB_LinkedList *plist, char *addr)
{

   struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
   strcpy(newNode->N_addr, addr);
   newNode->next = NULL;

   if (plist->head == NULL) {
      newNode->prev = NULL;
      plist->head = newNode;
      plist->cur = newNode;

   }

   else {
      plist->cur->next = newNode;
      newNode->prev = plist->cur;
      plist->cur = plist->cur->next;
   }
   //(plist->numOfdata)++;
}
/*
int Find(struct DB_LinkedList* plist, int pdata) {

struct Node*temp;
if (IsEmpty(plist)) {
return FALSE;

}
temp = plist->head;

while (temp->next != pdata) {

if (temp->data == pdata)
return TRUE;

else
temp = temp->next;


} //while ������
if (temp->data == pdata)
return TRUE;
//������1������
return FALSE;
}
*/


int getFirstItem(struct DB_LinkedList *plist, char *addr)
{
   if (plist->head == NULL)
      return FALSE;


   plist->last = plist->head;
   strcpy(addr, plist->last->N_addr);

   return TRUE;

}
int getNextItem(struct DB_LinkedList *plist, char *addr)
{
   if (plist->last->next == NULL)
      return FALSE;

   plist->last = plist->last->next;
   strcpy(addr, plist->last->N_addr);

   return TRUE;
}

int getPrevItem(struct DB_LinkedList *plist, char *addr) {
   if (plist->last->prev == NULL)
      return
      FALSE;


   plist->last = plist->last->prev;
   strcpy(addr, plist->last->N_addr);

   //plist->cur= plist->last->N_addr;


   return TRUE;
}


///////////////////////////////////////////////////////////



void go(struct DB_LinkedList *plist, char*addr)
{
   InsertItem(plist, addr);
   printf("%s\n", addr);

}
void backward(struct DB_LinkedList *plist)
{
char *cpy_addr;
cpy_addr = (char*)malloc(sizeof(cpy_addr));
   

   cpy_addr=plist->cur;
   plist->cur = plist->cur->prev;
   if (plist->cur->prev != NULL)
   {
      plist->cur->prev = plist->cur->prev->prev;
   }
   else
      plist->cur->prev = NULL;
   plist->cur->next = cpy_addr;
   printf("%s\n", plist->cur);
}

void forward(struct DB_LinkedList *plist, char*addr) //�������β�쎌�������� ��占쏙옙源�������占썲���뀐옙��占� ������������������������ ...?  //占썩�⑥�����쇱���������������띰옙��占� ������������.
{
   if (getFirstItem(plist, addr)) {
      getNextItem(plist, addr);
      printf("%s\n", addr);
   }


}

void refresh(struct DB_LinkedList *plist, char*addr)
{


      

         printf("%s\n", addr);
   }

   void home(struct DB_LinkedList *plist, char*home_addr)
   {
      ListInit(plist);

      InsertItem(plist, home_addr);
      printf("%s\n", home_addr);
   }



   void set(char*addr, char*home_addr) {
      {
         strcpy(home_addr, addr);
      }

      int quit();
      {
         return exit(-1);
      }

   }
   int quit()
   {
      return exit(-1);
   }



   /////////////////////////////
   int main()
   {

      struct DB_LinkedList list;

      char *addr;
      char *addr_temp;
      char *cmd;
      char *home_addr;

      ListInit(&list);

      addr = (char*)malloc(sizeof(addr)); //Dose it need copy temp?
      addr_temp = (char*)malloc(sizeof(addr_temp));
      cmd = (char*)malloc(sizeof(cmd));
      home_addr = (char*)malloc(sizeof(home_addr));

      strcpy(home_addr, "http://cse.hufs.ac.kr");



      //strcpy(addr_temp, addr);
      gets(addr);
      cmd = strtok(addr, " ");


      while (1) {


         if (!strcmp(cmd, "go")) // ������������ ��占쏙옙源������뱄옙占썲��占� addr�β�쎌�� ��占썲���쇽옙筌�紐��� ����占쏙옙������ 占쎄낀�����몄������������占�.
         {
            addr = strtok(NULL, " ");
            go(&list, addr);               //if cmd==go, assemble strtok one more time , make tok addr. 
         }


         else if (!strcmp(cmd, "backward"))       // ����占쏙옙������ ��占쏙옙源������몄����占� ����占쏙옙������������占썩�⑥��(���������쇽옙塋�占썲������占쏙옙��占� ����占쏙옙��������占쏙옙源������몄����占� ��占썲���쇽옙筌�紐���) ������ ��占쏙옙源������뱄옙占썲��占� 占쎄낀�����몄������������占�.
         {

            backward(&list, addr);
         }


         else if (!strcmp(cmd, "forward"))        // ���э옙�쎌����占� ��占쏙옙源������몄����占� ����占쏙옙������������占썩�⑥��(���������쇽옙塋�占썲������占쏙옙��占� ���э옙�쎌�����곤옙占쎄������몄����占� ��占썲���쇽옙筌�紐���) ������ ��占쏙옙源������뱄옙占썲��占� 占쎄낀�����몄������������占�.
         {                                        //forward������ ���э옙�쎌����占� ��占쏙옙源������뀐옙��占� ������������ ��占쏙옙占썲������ ������������ ��占쏙옙源�����������占� ��占썲����������占썲��占� ����������占쎄굅占� ������������ ��占쏙옙源������뱄옙占썲��占� 占쎄낀�����몄������������占�.
            forward(&list, addr);
         }


         else if (!strcmp(cmd, "refresh"))           // �������β�쎌�� 占썩�⑥�����쇱��  - ������������ ��占쏙옙源�����������占� ��占썲����������占썲��占� ����������占쎄굅占� ������������ ��占쏙옙源������뱄옙占썲��占� 占쎄낀�����몄������������占�
         {
            refresh(&list, addr);
         }


         else if (!strcmp(cmd, "home"))          // 嶺�占썲���몃Ь���몌옙����占썲��占� �띰옙����占썲���몌옙�⑥�� ������������ ��占쏙옙源�����占� �リ옇占썲��������占� clear������占썩�⑥�� ������������ ��占쏙옙源������뱄옙占썲��占� ����������占쎄낀�� ����占쏙옙������������嶺�占썲��占� ������ ��占쏙옙源������뱄옙占썲��占� 占쎄낀�����몄������������占� 占싸우���ル���� ������ ��占쏙옙源�����������占� http://cse.hufs.ac.kr������
         {
            home(&list, home_addr);
         }


         else if (!strcmp(cmd, "set"))            //������ ��占쏙옙源������뱄옙占썲��占� addr�β�쎌�� �곤옙���뀐옙占썲��占� - ������������ ��占쏙옙源�����������占� ��占썲����������占썲��占� ����������占쎄굅占� 占쎄낀�����몃�占쏙옙�ο옙怨ㅼ����占� ������������
         {
            addr = strtok(NULL, " ");
            set(addr, home_addr);
         }

         else if (!strcmp(cmd, "quit"))   // 占쏙옙������占쎄����⑨옙������占쏙옙��占� ���э옙���� ������������
         {
            quit();
         }


         gets(addr);
         cmd = strtok(addr, " ");

      }  //while end












         /*
         InsertItem(&list, 1);
         InsertItem(&list, 2);
         InsertItem(&list, 3);
         InsertItem(&list, 4);
         InsertItem(&list, 5);
         InsertItem(&list, 6);
         InsertItem(&list, 7);
         InsertItem(&list, 8);


         if (getFirstItem(&list, &data)) {

         printf("%d\n", data);

         while(getNextItem(&list, &data))
         {
         printf("%d\n", data);
         }
         while (getPrevItem(&list, &data))
         {
         printf("%d\n", data);
         }

         printf("\n\n");
         }*/

      return 0;

   }