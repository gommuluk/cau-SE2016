c
a
b
f
a
c
d
aa
bb






{

}
/*
int ListItemCount(struct DB_LinkedList *plist)

{

return plist->numOfdata;
}
*/
void InsertItem(struct DB_LinkedList *plist, char *addr)
{

   struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
   strcpy(newNode->N_addr, addr);
   newNode->next = NULL;

   if (plist->head == NULL) {
      newNode->prev = NULL;
      plist->head = newNode;
      plist->cur = newNode;

   }

   else {
      plist->cur->next = newNode;
      newNode->prev = plist->cur;
      plist->cur = plist->cur->next;
   }
   //(plist->numOfdata)++;
}
/*
int Find(struct DB_LinkedList* plist, int pdata) {

struct Node*temp;
if (IsEmpty(plist)) {
return FALSE;

}
temp = plist->head;

while (temp->next != pdata) {

if (temp->data == pdata)
return TRUE;

else
temp = temp->next;


} //while ������������������
if (temp->data == pdata)
return TRUE;
//������������������1������������������
return FALSE;
}
*/


int getFirstItem(struct DB_LinkedList *plist, char *addr)
{
   if (plist->head == NULL)
      return FALSE;


   plist->last = plist->head;
   strcpy(addr, plist->last->N_addr);

   return TRUE;

}
int getNextItem(struct DB_LinkedList *plist, char *addr)
{
   if (plist->last->next == NULL)
      return FALSE;

   plist->last = plist->last->next;
   strcpy(addr, plist->last->N_addr);

   return TRUE;
}

int getPrevItem(struct DB_LinkedList *plist, char *addr) {
   if (plist->last->prev == NULL)
      return
      FALSE;


   plist->last = plist->last->prev;
   strcpy(addr, plist->last->N_addr);

   //plist->cur= plist->last->N_addr;


   return TRUE;
}


///////////////////////////////////////////////////////////



void go(struct DB_LinkedList *plist, char*addr)
{
   InsertItem(plist, addr);
   printf("%s\n", addr);

}
void backward(struct DB_LinkedList *plist)
{
char *cpy_addr;
cpy_addr = (char*)malloc(sizeof(cpy_addr));
   

   cpy_addr=plist->cur;
   plist->cur = plist->cur->prev;
   if (plist->cur->prev != NULL)
   {
      plist->cur->prev = plist->cur->prev->prev;
   }
   else
      plist->cur->prev = NULL;
   plist->cur->next = cpy_addr;
   printf("%s\n", plist->cur);
}

void forward(struct DB_LinkedList *plist, char*addr) //���������������������몃����占쏙옙������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������������뀐옙占쏙옙����������占쏙옙占쏙옙������占쏙옙��占� ������������������������������������������������������������������������ ...?  //占쏙옙占썩�쇱��占싸우��������������占쎄���������������������������������������������占쎄�占쏙옙������占쏙옙��占� ������������������������������������.
{
   if (getFirstItem(plist, addr)) {
      getNextItem(plist, addr);
      printf("%s\n", addr);
   }


}

void refresh(struct DB_LinkedList *plist, char*addr)
{


      

         printf("%s\n", addr);
   }

   void home(struct DB_LinkedList *plist, char*home_addr)
   {
      ListInit(plist);

      InsertItem(plist, home_addr);
      printf("%s\n", home_addr);
   }



   void set(char*addr, char*home_addr) {
      {
         strcpy(home_addr, addr);
      }

      int quit();
      {
         return exit(-1);
      }

   }
   int quit()
   {
      return exit(-1);
   }



   /////////////////////////////
   int main()
   {

      struct DB_LinkedList list;

      char *addr;
      char *addr_temp;
      char *cmd;
      char *home_addr;

      ListInit(&list);

      addr = (char*)malloc(sizeof(addr)); //Dose it need copy temp?
      addr_temp = (char*)malloc(sizeof(addr_temp));
      cmd = (char*)malloc(sizeof(cmd));
      home_addr = (char*)malloc(sizeof(home_addr));

      strcpy(home_addr, "http://cse.hufs.ac.kr");



      //strcpy(addr_temp, addr);
      gets(addr);
      cmd = strtok(addr, " ");


      while (1) {


         if (!strcmp(cmd, "go")) // ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� addr���몃����占쏙옙������ ������占쏙옙占쎈����������占쎌��占쏙옙癲ワ옙����占썲��������占� ������������占쏙옙占쏙옙占쏙옙������������������ 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占�.
         {
            addr = strtok(NULL, " ");
            go(&list, addr);               //if cmd==go, assemble strtok one more time , make tok addr. 
         }


         else if (!strcmp(cmd, "backward"))       // ������������占쏙옙占쏙옙占쏙옙������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������筌�占썲������������占쏙옙��占� ������������占쏙옙占쏙옙占쏙옙������������������������������������占쏙옙占썩�쇱��占싸우����占�(����������������������������占쎌��占쏙옙輿삼옙���뀐옙占쏙옙�������������������뀐옙占쏙옙占쏙옙占썲������占쏙옙��占� ������������占쏙옙占쏙옙占쏙옙������������������������占쏙옙占쏙옙占쏙옙濚뱄옙������������������筌�占썲������������占쏙옙��占� ������占쏙옙占쎈����������占쎌��占쏙옙癲ワ옙����占썲��������占�) ������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占�.
         {

            backward(&list, addr);
         }


         else if (!strcmp(cmd, "forward"))        // ���������쇽옙占쏙옙����占쏙옙������������占쏙옙��占� ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������筌�占썲������������占쏙옙��占� ������������占쏙옙占쏙옙占쏙옙������������������������������������占쏙옙占썩�쇱��占싸우����占�(����������������������������占쎌��占쏙옙輿삼옙���뀐옙占쏙옙�������������������뀐옙占쏙옙占쏙옙占썲������占쏙옙��占� ���������쇽옙占쏙옙����占쏙옙������������������占쏙옙占쏙옙占쏙옙������������������筌�占썲������������占쏙옙��占� ������占쏙옙占쎈����������占쎌��占쏙옙癲ワ옙����占썲��������占�) ������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占�.
         {                                        //forward������������������ ���������쇽옙占쏙옙����占쏙옙������������占쏙옙��占� ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������占쏙옙占쏙옙������占쏙옙��占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙占쏙옙占쎈������������������占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������������������������뀐옙占썲��占� ������占쏙옙占쎈�������������������������������뀐옙占쏙옙�������뀐옙占썲��占� ������������������������������占쏙옙占쏙옙�댐옙占쏙옙��占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占�.
            forward(&list, addr);
         }


         else if (!strcmp(cmd, "refresh"))           // ���������������������몃����占쏙옙������ 占쏙옙占썩�쇱��占싸우��������������占쎄�����占�  - ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������������������������뀐옙占썲��占� ������占쏙옙占쎈�������������������������������뀐옙占쏙옙�������뀐옙占썲��占� ������������������������������占쏙옙占쏙옙�댐옙占쏙옙��占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占�
         {
            refresh(&list, addr);
         }


         else if (!strcmp(cmd, "home"))          // �꿔����占쏙옙占쎈����������筌�占썹낼����������占쏙옙占썲������������占쏙옙占쎈�������뀐옙占썲��占� ����占쎄�占쏙옙������������占쏙옙占쎈����������筌�占쏙옙占썲���⑼옙恝����占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������뀐옙占썲��占� ���э옙��占쏙옙占쏙옙占쎈�������������������������뀐옙占썲��占� clear������������������占쏙옙占썩�쇱��占싸우����占� ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� ������������������������������占쏙옙占쏙옙占쏙옙������ ������������占쏙옙占쏙옙占쏙옙�������������������������������������꿔����占쏙옙占쎈�������뀐옙占썲��占� ������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� 占쏙옙占쏙옙占쏙옙����������������占썲������������������������������������占쏙옙��占� 占쏙옙占쎈�占쎄낀��������占썬������������占� ������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������������������������뀐옙占썲��占� http://cse.hufs.ac.kr������������������
         {
            home(&list, home_addr);
         }


         else if (!strcmp(cmd, "set"))            //������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙������������������獄�占쏙옙占쏙옙占쏙옙�������뀐옙占썲��占� addr���몃����占쏙옙������ ������占쏙옙����������占쏙옙占쏙옙占쏙옙占쎈�������뀐옙占썲��占� - ������������������������������������ ������占쏙옙占쏙옙占쏙옙濚뱄옙���������������������������������뀐옙占썲��占� ������占쏙옙占쎈�������������������������������뀐옙占쏙옙�������뀐옙占썲��占� ������������������������������占쏙옙占쏙옙�댐옙占쏙옙��占� 占쏙옙占쏙옙占쏙옙����������������占썲���뀐옙占쏙옙占쏙옙占썲���몄�곤옙占쏙옙��占쎌�쎌�����������뀐옙占썲��占� ������������������������������������
         {
            addr = strtok(NULL, " ");
            set(addr, home_addr);
         }

         else if (!strcmp(cmd, "quit"))   // 占쏙옙占쏙옙占쏙옙������������������占쏙옙占쏙옙������������占썩�ο옙占썲������������������占쏙옙占쏙옙占쏙옙������占쏙옙��占� ���������쇽옙占쏙옙������������ ������������������������������������
         {
            quit();
         }


         gets(addr);
         cmd = strtok(addr, " ");

      }  //while end












         /*
         InsertItem(&list, 1);
         InsertItem(&list, 2);
         InsertItem(&list, 3);
         InsertItem(&list, 4);
         InsertItem(&list, 5);
         InsertItem(&list, 6);
         InsertItem(&list, 7);
         InsertItem(&list, 8);


         if (getFirstItem(&list, &data)) {

         printf("%d\n", data);

         while(getNextItem(&list, &data))
         {
         printf("%d\n", data);
         }
         while (getPrevItem(&list, &data))
         {
         printf("%d\n", data);
         }

         printf("\n\n");
         }*/

      return 0;

   }